{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method,\n        headers: requestConfig.headers,\n        body: JSON.stringify(requestConfig.body)\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequest: sendRequest\n  };\n};\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp;","map":{"version":3,"sources":["D:/Xaamp/htdocs/Reactjs/realistic/src/hooks/use-http.js"],"names":["useState","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAGA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAAA;;AAE1C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;;AAGA,QAAMQ,WAAW,GAAG,YAAY;AAC5BH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAACR,aAAa,CAACS,GAAf,EAAoB;AAC5CC,QAAAA,MAAM,EAAEV,aAAa,CAACU,MADsB;AAE5CC,QAAAA,OAAO,EAAEX,aAAa,CAACW,OAFqB;AAG5CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,aAAa,CAACY,IAA7B;AAHsC,OAApB,CAA5B;;AAOA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAjB,MAAAA,SAAS,CAACgB,IAAD,CAAT;AACC,KAdL,CAcM,OAAOE,GAAP,EAAY;AAClBd,MAAAA,QAAQ,CAACc,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACC;;AACLjB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GArBC;;AAsBF,SAAO;AACHD,IAAAA,SAAS,EAAEA,SADR;AAEHE,IAAAA,KAAK,EAAEA,KAFJ;AAGHE,IAAAA,WAAW,EAAEA;AAHV,GAAP;AAKD,CAjCD;;GAAMP,O;;AAmCN,eAAeA,OAAf","sourcesContent":["import { useState } from 'react'\r\n\r\n\r\nconst useHttp = (requestConfig, applyData) => {\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n\r\n    const sendRequest = async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch(requestConfig.url, {\r\n                method: requestConfig.method,\r\n                headers: requestConfig.headers,\r\n                body: JSON.stringify(requestConfig.body)\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Request failed!');\r\n            }\r\n\r\n            const data = await response.json();\r\n            applyData(data)\r\n            } catch (err) {\r\n        setError(err.message || 'Something went wrong!');\r\n        }\r\n    setIsLoading(false);\r\n  };\r\n  return {\r\n      isLoading: isLoading,\r\n      error: error,\r\n      sendRequest: sendRequest\r\n  }\r\n};\r\n\r\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}